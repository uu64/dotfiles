# dein
[[plugins]]
repo = 'Shougo/dein.vim'


# appearance
[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'iceberg',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'filename', 'readonly', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'MyFugitive',
        \ },
        \ 'component_expand': {
        \   'buffers': 'lightline#bufferline#buffers'
        \ },
        \ 'component_type': {
        \   'buffers': 'tabsel'
        \ },
        \ 'tabline': {
        \   'left': [ ['buffers'] ],
        \   'right': [ ['close'] ]
        \ },
        \ }
  function! MyFugitive()
    let l:branch = fugitive#head()
    return l:branch ==# "" ? "" : "\ue725 " . fugitive#head()
  endfunction
'''

[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'
hook_add = '''
  let g:lightline#bufferline#show_number = 1
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_exclude_filetypes = ['nerdtree', 'neoterm', 'gitcommit', 'fzf']
  autocmd VimEnter,Colorscheme * highlight IndentGuidesOdd guibg=#161821 ctermbg=234 guifg=#242940 ctermfg=236
  autocmd VimEnter,Colorscheme * highlight IndentGuidesEven guibg=#1e2132 ctermbg=235 guifg=#242940 ctermfg=236
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
  let nerdtreeshowhidden=1
  nnoremap <leader>n :NERDTreeFocus<cr>
  nnoremap <C-b> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'


# fuzzy finder
[[plugins]]
repo   = 'junegunn/fzf'
build  = './install --all --no-bash'
merged = 0

[[plugins]]
repo     = 'junegunn/fzf.vim'
depends  = 'fzf'
hook_add = '''
  let g:fzf_layout = { 'down': '30%' }
  let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
  nnoremap <C-]> :GFiles<CR>
'''


# git integration
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'


# language support
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = """
  let g:ale_linters = {
        \ 'go': ['golint', 'go vet'],
        \ 'python': ['flake8'],
        \ }
  let g:ale_fixers = {
        \ 'go': ['goimports'],
        \ 'python': ['black'],
        \ }
  let g:ale_fix_on_save = 0
"""

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
  " if hidden is not set, textedit might fail.
  set hidden

  " Some servers have issues with backup files, see #649
  set nobackup
  set nowritebackup

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " Make <CR> auto-select the first completion item and notify coc.nvim to
  " format on enter, <cr> could be remapped by other vim plugin
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " Key mappings for coc.nvim
  nmap <silent> cd <Plug>(coc-definition)
  nmap <silent> cy <Plug>(coc-type-definition)
  nmap <silent> ci <Plug>(coc-implementation)
  nmap <silent> crf <Plug>(coc-references)
  nmap <silent> crn <Plug>(coc-rename)
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let s:config_home = empty($XDG_CONFIG_HOME) ? expand('~/.config') : $XDG_CONFIG_HOME . '/nvim/ultisnips/'

  let g:UltiSnipsSnippetDirectories  = [s:config_home]
  let g:UltiSnipsUsePythonVersion    = 3
  let g:UltiSnipsEditSplit           = 'normal'
  let g:UltiSnipsExpandTrigger       = "<tab>"
  let g:UltiSnipsJumpForwardTrigger  = "<c-b>"
  let g:UltiSnipsJumpBackwardTrigger = "<c-z>"
'''


# terminal
[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
  let g:neoterm_autoinsert = 1
  let g:neoterm_autoscroll = 1
  let g:neoterm_default_mod = 'belowright'
  let g:neoterm_use_relative_path = 1
  nnoremap <c-t><c-t> :Ttoggle<CR>
  tnoremap <c-t><c-t> <C-\><C-n>:Ttoggle<CR>
  tnoremap <silent> <ESC> <C-\><C-n>
'''


# misc
[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'
hook_add = '''
  set mouse=a
  let g:comfortable_motion_no_default_key_mappings = 1
  nnoremap <silent> <C-d> :call comfortable_motion#flick(100)<CR>
  nnoremap <silent> <C-u> :call comfortable_motion#flick(-100)<CR>
  noremap <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
  noremap <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>
'''

